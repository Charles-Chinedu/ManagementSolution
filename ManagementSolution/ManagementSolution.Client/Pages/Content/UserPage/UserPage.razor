@page "/manage-user"
@implements IDisposable

@if (allState.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Manage Users</h4>
                    </div>
                    <div class="card-header" style="max-height:500px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Id</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Users is not null)
                                    {
                                        int count = 1;
                                        @foreach (var user in Users)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@user.UserId</td>
                                                <td>@user.Name</td>
                                                <td>@user.Email</td>
                                                <td>@user.Role</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(user)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(user)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr><td colspan="5"><div class="alert alert-info text-center">No users added yet!</div></td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<UserDialog @ref="userDialog"
    ManageUser="User"
    SystemRoles="SystemRoles"
    HandleSaveOperationEvent="HandleSaveOperationEvent" />

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

@code {
    UserDialog? userDialog;
    ManageUser User = new();
    public List<ManageUser> Users { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    private async Task GetUsers()
    {
        Users = await accountService.GetUsers();
    }

    private async Task GetRoles()
    {
        SystemRoles = await accountService.GetRoles();
    }

    void OpenDialog()
    {
        userDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(ManageUser user)
    {
        var result = await accountService.UpdateUser(user);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            User = new();
            await GetUsers();
        }
    }

    private void EditClicked(ManageUser user)
    {
        User = user;
        OpenDialog();
    }

    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {user.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await accountService.DeleteUser(user.UserId);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetUsers();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        await dialogService.AlertAsync(message, flag ? "Successful Operation" : "Alert!");
        return flag;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
