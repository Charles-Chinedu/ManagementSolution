@implements IDisposable

@if (allState.ShowTown)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Towns</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>Add Town
                        </button>
                    </div>
                    <div class="card-header" style="max-height:500px; overflow:auto">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>City</th>
                                        <th>Town</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Towns is not null)
                                    {
                                        int count = 1;
                                        @foreach (var item in Towns)
                                        {
                                            <tr>
                                                <th>@count</th>
                                                <td>@item.City!.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr><td colspan="4" class="text-center">No Town added yet!</td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<TownDialog @ref="townDialog" 
    Town="Town" 
    Cities="Cities" 
    HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    TownDialog? townDialog;
    Town Town = new();
    List<Town> Towns = new();
    List<City> Cities = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTowns();
        await GetCities();
        allState.Action += StateHasChanged;
    }

    private async Task GetTowns() => Towns = await townService.GetAll(Constants.TownUrl);
    private async Task GetCities() => Cities = await cityService.GetAll(Constants.CityUrl);

    void AddButtonClicked()
    {
        townDialog?.ChangeTitle("Add");
        Town = new();
        OpenDialog();
    }

    void OpenDialog() => townDialog!.OpenDialog();

    async Task HandleSaveOperationEvent(Town town)
    {
        bool exists = await townService.Exists(town.Id, Constants.TownUrl);
        var result = exists
            ? await townService.Update(town, Constants.TownUrl)
            : await townService.Insert(town, Constants.TownUrl);

        if (await DisplayMessage(result.Flag, result.Message))
        {
            Town = new();
            await GetTowns();
            townDialog?.ChangeTitle("Add");
        }
    }

    void EditClicked(Town town)
    {
        townDialog?.ChangeTitle("Update");
        Town = town;
        OpenDialog();
    }

    async Task DeleteClicked(Town town)
    {
        if (!await dialogService.ConfirmAsync($"Delete {town.Name}?", "Confirm Delete")) return;
        var response = await townService.DeleteById(town.Id, Constants.TownUrl);
        if (await DisplayMessage(response.Flag, response.Message)) await GetTowns();
    }

    async Task<bool> DisplayMessage(bool flag, string message)
    {
        await dialogService.AlertAsync(message, flag ? "Success" : "Alert!");
        return flag;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
