@implements IDisposable

@if (allState.ShowCountry)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Countries</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>Add Country
                        </button>
                    </div>
                    <div class="card-header" style="max-height:500px; overflow:auto">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Country</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Countries is not null)
                                    {
                                        int count = 1;
                                        @foreach (var item in Countries)
                                        {
                                            <tr>
                                                <th>@count</th>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr><td colspan="3" class="text-center">No Country added yet!</td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<CountryDialog @ref="countryDialog" 
    Country="Country" 
    HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    CountryDialog? countryDialog;
    Country Country = new();
    List<Country> Countries = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    private async Task GetCountries() => Countries = await countryService.GetAll(Constants.CountryUrl);

    void AddButtonClicked()
    {
        countryDialog?.ChangeTitle("Add");
        Country = new();
        OpenDialog();
    }

    void OpenDialog() => countryDialog!.OpenDialog();

    async Task HandleSaveOperationEvent(Country country)
    {
        bool exists = await countryService.Exists(country.Id, Constants.CountryUrl);
        var result = exists
            ? await countryService.Update(country, Constants.CountryUrl)
            : await countryService.Insert(country, Constants.CountryUrl);

        if (await DisplayMessage(result.Flag, result.Message))
        {
            Country = new();
            await GetCountries();
            countryDialog?.ChangeTitle("Add");
        }
    }

    void EditClicked(Country country)
    {
        countryDialog?.ChangeTitle("Update");
        Country = country;
        OpenDialog();
    }

    async Task DeleteClicked(Country country)
    {
        if (!await dialogService.ConfirmAsync($"Delete {country.Name}?", "Confirm Delete")) return;
        var response = await countryService.DeleteById(country.Id, Constants.CountryUrl);
        if (await DisplayMessage(response.Flag, response.Message)) await GetCountries();
    }

    async Task<bool> DisplayMessage(bool flag, string message)
    {
        await dialogService.AlertAsync(message, flag ? "Success" : "Alert!");
        return flag;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
