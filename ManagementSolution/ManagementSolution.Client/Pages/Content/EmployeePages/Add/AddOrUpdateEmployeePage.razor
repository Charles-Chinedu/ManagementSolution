@implements IDisposable
@rendermode InteractiveAuto

@if (allState.ShowEmployee && ShowAddOrUpdateEmployee)
{
    <div class="container">
        <div class="row mt-5">
            <div class="col-lg-1 text-center">
                <i class="bi bi-x-lg fs-3 fw-bold text-danger" style="cursor:pointer" @onclick="CloseForm"></i>
            </div>
            <div class="col-lg-6 text-center"><h2>@Title Employee</h2></div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
            <div class="hstack">
                @if (FirstLayer)
                {
                    <div class="@FloatingNumber1 text-center">1</div>
                    <div class="@Floatingdiv1 format-border"></div>
                    <div class="@FloatingNumber2 text-center">2</div>
                    <div class="@Floatingdiv2 format-border"></div>
                }
                @if (SecondLayer)
                {
                    <div class="@FloatingNumber1 text-center">1</div>
                    <div class="@Floatingdiv1 format-border"></div>
                    <div class="@FloatingNumber2 format-border">2</div>
                    <div class="@Floatingdiv2 format-border"></div>
                }
            </div>
        </div>

        @* // Employee form / first / second layers *@
        <div class="col-lg-12">
            <div class="container-fluid">
                @if (FirstLayer)
                {
                    <EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-lg-2"></div>
                            <div class="col-lg-4">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Personal Information</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label class="form-label">Fullname</label>
                                        <InputText @bind-Value="EmployeeGroup1.Name" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.Name" class="text-warning" />
                                    </div>
                                    <div class="form-group mt-2">
                                        <label class="form-label">Telephone</label>
                                        <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-warning"/>
                                    </div>
                                    <div class="form-group mt-2">
                                        <label class="form-label">Address</label>
                                        <InputTextArea @bind-Value="EmployeeGroup1.Address" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.Address" class="text-warning"/>
                                    </div>
                                    <div class="form-control mt-2">
                                        <img src="@EmployeeGroup1.Photo" width="100" height="100" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4 mt-2">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Other Information</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label class="form-label">Civil Id</label>
                                        <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-warning" />
                                    </div>
                                    <div class="form-group mt-2">
                                        <label class="form-label">File Number</label>
                                        <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-warning" />
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label @(string.IsNullOrWhiteSpace(ImageUploadMessage) ? "" : "text-danger")">
                                            @(string.IsNullOrWhiteSpace(ImageUploadMessage) ? "Upload Image" : ImageUploadMessage)
                                        </label>
                                        <InputFile class="form-control" OnChange="UploadImage"></InputFile>
                                        <ValidationMessage For="() => EmployeeGroup1.Photo" class="text-warning" />
                                    </div>
                                    <div class="form-group mt-5">
                                        <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                                            <i class="bi bi-arrow-right"></i>
                                            Next
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-2"></div>
                        </div>
                    </EditForm>
                }
                @if (SecondLayer)
                {
                    @* Employee Group 2 *@
                    <EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-lg-2"></div>
                            <div class="col-lg-4">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Job Information</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label class="form-label">Job Name</label>
                                        <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
                                        <ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label">Select General Department</label>
                                        @{
                                            string generalDepartment = string.IsNullOrEmpty(GeneralDepartment) ? "Select General Department" : GeneralDepartment;
                                        }
                                        <SfDropDownList TValue="string" 
                                            TItem="GeneralDepartment" 
                                            Placeholder="@generalDepartment"
                                            DataSource="GeneralDepartments">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label">Select Department</label>
                                        @{
                                            string department = Department.Equals("") ? "Select Department" : Department;
                                        }
                                        <SfDropDownList TValue="string" 
                                            DataSource="Departments" 
                                            TItem="Department" 
                                            Placeholder="@department">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label">Select Branch</label>
                                        @{
                                            string branch = Branch.Equals("") ? "Select Branch" : Branch;
                                        }
                                        <SfDropDownList TValue="string" 
                                            TItem="Branch" 
\                                           Placeholder="@branch" 
                                            DataSource="Branches">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                        <ValidationMessage For="() => EmployeeGroup2.BranchId" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-4 mb-5">
                                        <button class="btn btn-primary float-start" type="button" @onclick="PrevClicked">
                                            <i class="bi bi-arrow-left"></i>
                                            Prev
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Location Information</div>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label class="form-label">Select Country</label>
                                        @{
                                            string country = Country.Equals("") ? "Select Country" : Country;
                                        }
                                        <SfDropDownList TValue="string" 
                                            TItem="Country" 
                                            Placeholder="@country" 
                                            DataSource="Countries">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Select City</label>
                                        @{
                                            string city = City.Equals("") ? "Select Country" : City;
                                        }
                                        <SfDropDownList TValue="string"
                                            TItem="City" 
                                            Placeholder="@city" 
                                            DataSource="Cities">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Select Town</label>
                                        @{
                                            string town = Town.Equals("") ? "Select Town" : Town;
                                        }
                                        <SfDropDownList TValue="string"
                                            TItem="Town" 
                                            Placeholder="@town" 
                                            DataSource="Towns">
                                            <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                            <DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
                                        </SfDropDownList>
                                        <ValidationMessage For="() => EmployeeGroup2.TownId" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label">Other</label>
                                        <textarea @bind="EmployeeGroup2.Other" placeholder="Optional" class="form-control" />
                                    </div>
                                    <div class="form-group mt-4 mb-5">
                                        <button class="btn btn-success float-end" type="submit">
                                            <i class="bi bi-save"></i>
                                            Save
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-2"></div>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public Employee Employee { get; set; } = new();

    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGroupinging2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();


    string FloatingNumber1 = "floatingNumber";
    string Floatingdiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;

    public string Title { get; set; } = "Add";
    public string GeneralDepartment { get; set; } = "";
    public string Department { get; set; } = "";
    public string Branch { get; set; } = "";
    public string Country { get; set; } = "";
    public string City { get; set; } = "";
    public string Town { get; set; } = "";


    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }


    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }


    void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
    }


    // Form closed
    [Parameter]
    public EventCallback NotifyParentFormCloseClicked { get; set; }
    async Task CloseForm()
    {
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFormCloseClicked.InvokeAsync();
    }


    // File Upload
    string ImageUploadMessage = "";

    // This is to take JPG and PNG files.
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        string extension = Path.GetExtension(file.Name).ToLower();
        string format;

        // Determine file format
        if (extension == ".png")
        {
            format = "image/png";
        }
        else if (extension == ".jpg" || extension == ".jpeg")
        {
            format = "image/jpeg";
        }
        else
        {
            ImageUploadMessage = "Only PNG or JPG files are allowed.";
            return;
        }

        // Resize and convert to base64
        var resizedImage = await file.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);

        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        EmployeeGroup1.Photo = imageData;
        ImageUploadMessage = ""; // Clear message on success
    }


    // Form Validations
    // Form 1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name) 
        || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.FileNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.Address)
        || string.IsNullOrEmpty(EmployeeGroup1.Photo)
        || string.IsNullOrEmpty(EmployeeGroup1.CivilId))
            return false;
        else
            return true;
    }


    // Form 2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
        || string.IsNullOrEmpty(EmployeeGroup2.TownId)
        || string.IsNullOrEmpty(EmployeeGroup2.BranchId))
            return false;
        else
            return true;
    }


    // Save forms
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }
    private async Task Form1()
    {
        var isValid = ValidateEmployeeGroup1();
        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }
    }


    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if (isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.BranchId = EmployeeGroup2.BranchId;
            Employee.TownId = EmployeeGroup2.TownId;

            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
            EmployeeGroup1 = new();
            EmployeeGroup2 = new();
            Employee = new();
        }
    }


    public void ClearContent()
    {
        Employee = new();
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        StateHasChanged();
    }


    // Country / City / Town
    [Parameter] 
    public EventCallback<string> HandleCountrySelectEvent { get; set; }
    public void OnCountryValueChange(ChangeEventArgs<string, Country> args) =>
        HandleCountrySelectEvent.InvokeAsync(args.Value);


    [Parameter] 
    public EventCallback<string> HandleCitySelectEvent { get; set; }
    public void OnCityValueChange(ChangeEventArgs<string, City> args) =>
        HandleCitySelectEvent.InvokeAsync(args.Value);


    public void OnTownValueChange(ChangeEventArgs<string, Town> args) =>
        EmployeeGroup2.TownId = args.Value;


    // General Department / Department / Branch
    [Parameter]
    public EventCallback<string> HandleGeneralDepartmentSelectedEvent { get; set; }
    async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args) =>
        await HandleGeneralDepartmentSelectedEvent.InvokeAsync(args.Value);


    [Parameter]
    public EventCallback<string> HandleDepartmentSelectedEvent { get; set; }
    async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> args) =>
        await HandleDepartmentSelectedEvent.InvokeAsync(args.Value);


    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args) =>
        EmployeeGroup2.BranchId = args.Value;


    // Form closed
    [Parameter]
    public EventCallback NotifyParameterForCloseClicked { get; set; }
    async Task Closeform()
    {
        ShowAddOrUpdateEmployee = false;
        await NotifyParameterForCloseClicked.InvokeAsync();
    }


    public void Dispose() =>
        allState.Action -= StateHasChanged;
}
