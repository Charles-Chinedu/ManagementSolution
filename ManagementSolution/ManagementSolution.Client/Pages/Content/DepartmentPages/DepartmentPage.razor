@implements IDisposable

@if (allState.ShowDepartment)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Departments</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i>Add Department
                        </button>
                    </div>
                    <div class="card-header" style="max-height:500px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">General Department</th>
                                        <th scope="col">Department</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Departments is not null)
                                    {
                                        int count = 1;
                                        @foreach (var item in Departments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.GeneralDepartment!.Name</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No Department added yet!</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<DepartmentDialog @ref="departmentDialog"
    HandleSaveOperationEvent="HandleSaveOperationEvent"
    Department="Department"
    GeneralDepartments="GeneralDepartments" />

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

@code {
    public string Title { get; set; } = "Add";
    DepartmentDialog? departmentDialog;
    Department Department = new();
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    public List<Department> Departments { get; set; } = new();
    
    protected async override Task OnInitializedAsync()
    {
        await GetDepartments();
        await GetGeneralDepartments();
        allState.Action += StateHasChanged;
    }

    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants.DepartmentUrl);
    }

    private async Task GetGeneralDepartments()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentUrl);
    }

    void AddButtonClicked()
    {
        departmentDialog?.ChangeTitle("Add");
        Department = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        departmentDialog!.OpenDialog();   
    }

    private async Task HandleSaveOperationEvent(Department department)
    {
        bool successCheck = false;
        var existingDept = await departmentService.Exists(department.Id, Constants.DepartmentUrl);
        if (existingDept)
        {
            var result = await departmentService.Update(department, Constants.DepartmentUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await departmentService.Insert(department, Constants.DepartmentUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            Department = new();
            await GetDepartments();
            departmentDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(Department dept)
    {
        departmentDialog?.ChangeTitle("Update");
        Department = dept;
        OpenDialog();
    }

    private async Task DeleteClicked(Department dept)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {dept.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await departmentService.DeleteById(dept.Id, Constants.DepartmentUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetDepartments();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Successful Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
