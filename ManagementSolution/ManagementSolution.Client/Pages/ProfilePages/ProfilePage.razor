@using System.Security.Claims
@using ManagementSolution.Client.Pages.ReactionComponent
@if (allState.ShowUserProfile)
{
    <div class="container mt-5">
        <div class="col-lg-3"></div>
        <div class="col-lg-6">
            <EditForm Model="userProfileState.userProfile" OnValidSubmit="UpdateProfile">
                <DataAnnotationsValidator />
                <div class="card border-success shadow-lg">
                    <div class="card-header">Personal Information</div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-3"></div>
                            <div class="col-lg-6 d-flex justify-content-center">
                                <div class="vstack gap-2">
                                    <img style="width:100px; height: 100px; border-radius: 50%" src="@userProfileState.userProfile.Image" />
                                    <InputFile OnChange="UploadImage" class="form-control" />
                                </div>
                            </div>
                            <div class="col-lg-3"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Id</label>
                        <input type="text" value="@userProfileState.userProfile.Id" class="form-control" disabled />
                    </div>
                    <div class="form-group mt3">
                        <label class="form-label">Name</label>
                        <input type="text" value="@userProfileState.userProfile.Name" class="form-control" />
                    </div>
                    <div class="form-group mt-3">
                        <label class="form-label">Email Address</label>
                        <input type="text" value="@userProfileState.userProfile.Email" class="form-control" />
                    </div>
                    <div class="form-group mt-4">
                        @if (ShowSpinner)
                        {
                            <ButtonClick />
                        }
                        else
                        {
                            <button class="btn btn-primary float-end" type="submit">Save</button>
                        }
                    </div>
                </div>
                <div class="card-footer">
                    <ValidationSummary />
                </div>
            </EditForm>
        </div>
        <div class="col-lg-3"></div>
    </div>
}

@code {
    private bool firstRender = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserDetails();
            allState.Action += StateHasChanged;
            userProfileState.Action += StateHasChanged;
            firstRender = true;
        }
    }

    public bool ShowSpinner { get; set; } = false;
    private async Task UserDetails()
    {
        try
        {
            var client = await getHttpClient.GetPrivateHttpClient();
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            userProfileState.userProfile.Id = authState.User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier)!.Value;
            userProfileState.userProfile.Name = authState.User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Name)!.Value;
            userProfileState.userProfile.Email = authState.User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Email)!.Value;
            var response = await client.GetAsync($"api/authentication/user-image/{userProfileState.userProfile.Id}");
            if (!response.IsSuccessStatusCode)
                return;

            var result = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(result))
                return;
            else
                userProfileState.userProfile.Image = result!;
        }
        catch { }
    }

    async Task UpdateProfile()
    {
        if (userProfileState.userProfile.Image == "../Images/proxy-image.jpeg")
        {
            await dialogService.AlertAsync("Add Profile Image.", "Alert!");
            return;
        }
        ShowSpinner = true;
        var client = await getHttpClient.GetPrivateHttpClient();
        var response = await client.PutAsJsonAsync("api/authentication/update-profile", userProfileState.userProfile);
        if (!response.IsSuccessStatusCode)
        {
            ShowSpinner = false;
            return;
        }
        var result = await response.Content.ReadFromJsonAsync<bool>();
        if (result)
        {
            ShowSpinner = false;
            await dialogService.AlertAsync("Profile updated", "Success");
            userProfileState.ProfileUpdated();
            await LogoutClicked();
        }
        ShowSpinner = false;
    }

    string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        string extension = Path.GetExtension(file.Name).ToLower();
        string format;

        // Determine file format
        if (extension == ".png")
        {
            format = "image/png";
        }
        else if (extension == ".jpg" || extension == ".jpeg")
        {
            format = "image/jpeg";
        }
        else
        {
            ImageUploadMessage = "Only PNG or JPG files are allowed.";
            return;
        }

        // Resize and convert to base64
        var resizedImage = await file.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);

        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        userProfileState.userProfile.Image = imageData;
        ImageUploadMessage = ""; // Clear message on success
    }

    private async Task LogoutClicked()
    {
        var logoutModel = new UserSession();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
        NavManager.NavigateTo("/identity/account/login", replace: true, forceLoad: true);
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
        userProfileState.Action -= StateHasChanged;
    }
}