@implements IDisposable
@if (allState.ShowHealth)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-header"><h4 class="float-start">Health Information</h4></div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            @{
                                var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print"});
                            }
                            <SfGrid DataSource="@Doctors" AllowPaging="true" AllowSorting="true" 
                                Toolbar="@Tool" AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickedHandler" TValue="Doctor"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field="@nameof(Doctor.EmployeeId)" HeaderText="Employee ID"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.MedicalDiagnose)" HeaderText="First Name"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.MedicalRecommendation)" HeaderText="Last Name"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.Date)" HeaderText="Date"></GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var employee = (context as Doctor);
                                                <div>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(employee!)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(employee!)"></i>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>   
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    #cursorStyle{
        cursor: pointer;
    }
</style>
<DoctorDialog @ref="doctorDialog"
    Doctor="Doctor"
    HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    private SfGrid<Doctor>? DefaultGrid;
    DoctorDialog? doctorDialog;
    Doctor Doctor = new();
    public List<Doctor> Doctors { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetHealth();
        allState.Action += StateHasChanged;
    }

    private async Task GetHealth() => Doctors = await doctorService.GetAll(Constants.DoctorUrl);

    void AddButtonClicked()
    {
        Doctor = new();
        OpenDialog();
    }

    void OpenDialog() => doctorDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(Doctor doctor)
    {
        var result = await doctorService.Update(doctor, Constants.DoctorUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            Doctor = new();
            await GetHealth();
        }
    }
    private void EditClicked(Doctor item)
    {
        Doctor = item;
        OpenDialog();
    }

    private async Task DeleteClicked(Doctor item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confirm Delete");
        if (!confirm) return;

        var response = await doctorService.DeleteById(item.EmployeeId, Constants.DoctorUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetHealth();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;

    public async Task ToolbarClickedHandler(ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExportToExcelAsync()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.ExportToPdfAsync()!;
    }
} 
